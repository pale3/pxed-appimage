#! /bin/bash -E

this=$$
appname="pxed"
pidfile="/var/run/$appname.pid"
logfile="/var/run/$appname.log"

if [[ $UID -ne 0 ]]; then
	echo "$appname: needs root privileges"; exit 1;
fi

: ${PXED_DEBUG:=""}

HERE="$(dirname "$(readlink -f "${0}")")"
export UNION_PRELOAD="${HERE}"
#export LD_PRELOAD="${HERE}/libunionpreload.so"
export PATH="${HERE}"/usr/bin/:"${HERE}"/usr/sbin/:"${HERE}"/usr/games/:"${HERE}"/bin/:"${HERE}"/sbin/:"${PATH}"
export LD_LIBRARY_PATH="${HERE}"/usr/lib/:"${HERE}"/usr/lib/i386-linux-gnu/:"${HERE}"/usr/lib/x86_64-linux-gnu/:"${HERE}"/usr/lib32/:"${HERE}"/usr/lib64/:"${HERE}"/lib/:"${HERE}"/lib/i386-linux-gnu/:"${HERE}"/lib/x86_64-linux-gnu/:"${HERE}"/lib32/:"${HERE}"/lib64/:"${LD_LIBRARY_PATH}"
export XDG_DATA_DIRS="${HERE}"/usr/share/:"${XDG_DATA_DIRS}"

trap exit SIGINT SIGTERM ERR

printline(){ echo "[$(/bin/date +"%b %d %H:%M:%S")] $1"; }

die(){
    local msg="$1" sign=$2 pid=$3
    echo "$1" >&2; kill $sign $pid
}

is_arg_valid(){
    if [[ -z "$2" ]]; then
        die "Missing arg $1" -10 $this
    fi
    echo $2
}

header(){
cat << EOL
___  _  _ ____ ___
|__]  \/  |___ |  \ v$(<"$HERE/VERSION") ($(<"$HERE/pxed-buildtime"))
|    _/\_ |___ |__/ (Fire And Forget)

EOL
}

usage(){
cat << EOL
this-version: $(<"$HERE/VERSION")
dnsmasq: $(<"$HERE/dnsmasq-VERSION")
fswatch: $(<"$HERE/fswatch-VERSION")

$appname: <opt> <arg>
 -i --iface*           used interface, E.g eth0
 -a --listen-address   listen on IP address, E.g 10.10.10.1
 -F --dhcp-range       DHCP offer range with lease time, E.g 10.10.10.2-10.10.10.100,24h, default --interface CIDR
 -T --tftp-root        TFTP root dir location, default /srv/tftp
 -s --status           print status of app
 -v --version          print version
 -h --help             this screen

fswatch: (optional)
 -w --watch*           path or file to watch, can use glob E.g /path/to/*.tar
 -m --watch-method     possible methods are default poll_monitor or inotify_monitor, default poll_monitor
 -e --watch-on-changed on watch item's change do something
 -u --uncompress       uncompress to \$tftproot (works only when --watch is used)

info:
 - requires root privileges
 - arguments marked with (*) are mandatory
 - useful variables for --watch-on-changed are \$watch, \$entry, \$tftproot, however eval is used
   here thus, you can do a way more. If you plan to use glob, make sure that --watch is quoted

Examples:
 # $appname -i br0 -F 10.10.10.2,10.10.10.100,12h -T /srv/tftp
 # $appname -i br0 -F 10.10.10.2,10.10.10.100,12h -T /srv/tftp --watch /s/l/image.tar -e "cp \$entry /some/location"
 # $appname -i usb0 --watch "/s/l/im*.tar" -e "cp \$entry /some/location"
EOL
}

fisrtsync(){

    local src=$(ls -1r $watch|head -n 1)

    printline "fswatch: syncing to $tftproot $src"
    cat $src | sudo -u $SUDO_USER tar -xf - -C $tftproot
    printline "fswatch: syncing returned $?"
}

watcher(){

    watch_method=${watch_method:="poll_monitor"}
    if [[ $watch_method != "poll_monitor" && $watch_method != "inotify_monitor" ]]; then
        echo "$appname: invalid --watch-method specified!"; exit 1;
    fi

    dr=$(dirname $watch)
    printline "fswatch: watching '$watch', using '$watch_method'"
    ${HERE}/usr/bin/fswatch -r -m $watch_method $dr | while read entry; do

        if [[ -z $watch_on_changed && $uncompress != 1 ]]; then
            printline "fswatch: changed '$entry', but no action given"
            continue
        fi

        # check if this is file
        if [[ ! -f $entry ]]; then
            continue
        fi

        if (( $uncompress == 1 )); then

            # entry has to match watchraw partially
            if [[ $entry != *${watchraw}* ]]; then
                continue
            fi

            printline "fswatch: changed '$entry', exec tar -xf -C $tftproot"
            cat $entry | sudo -u $SUDO_USER tar -xf - -C $tftproot
        else
            printline "fswatch: changed '$entry', exec '$watch_on_changed'"
            eval $watch_on_changed
        fi

        printline "fswatch: exec returned $?"
    done
}

opts=(-C ${HERE}/etc/$appname.conf --no-daemon --quiet-dhcp)
while true; do
  case $1 in
    -i| --iface) iface=$(is_arg_valid $1 "$2"); shift 2;;
    -a| --listen-address) listenaddr=$(is_arg_valid $1 "$2"); opts+=(--listen-address=$listenaddr); shift 2 ;;
    -F| --dhcp-range) dhcprange=$(is_arg_valid $1 "$2"); shift 2;;
    -T| --tftp-root) tftproot=$(is_arg_valid $1 "$2"); shift 2 ;;
    -s| --status )
    	    if [[ -f $pidfile ]]; then
	    	    echo "pid: $(<$pidfile)";
		        echo "listening on: "
		        netstat -lpn -4 | awk 'BEGIN {FS="[ :]+"};/pxed/{print " - " $1 " " $4 ":" $5}'
		        exit 1;
    	    fi
	        echo "$appname: nothing to show here, yet"; exit 1 ;;
    -w| --watch ) watch="$2"; watchraw=$(set -f; basename $2); shift 2;;  # watch direct file or dir
    -m| --watch-method) watch_method="$2"; shift 2;; # poll_monitor or inotify_monitor
    -e| --watch-on-changed) watch_on_changed="$2"; shift 2;;
    -u| --uncompress) uncompress=1; shift 1;;
    -v| --version ) echo "$appname: $(<"$HERE/VERSION")"; exit 1;;
    -h| --help ) usage; exit 1 ;;
    * ) break ;;
  esac
done

if [[ -f $pidfile && -d /proc/$(<$pidfile) ]]; then
    echo "$appname: already running"; exit 1;
fi

if [[ -z $iface ]]; then
    echo "$appname: missing mandatory argument --interface"; exit 1;
fi

header

if [[ ! -z $PXED_DEBUG ]]; then
	optdel=${opts[@]/--quiet-dhcp}
	opts=($optdel --log-dhcp);
fi

tftproot=${tftproot:="/srv/tftp"}
if [[ ! -d $tftproot ]]; then
    echo "$appname: missing $tftproot directory"; exit 1;
fi

if [[ ! -z $uncompress  && ! -z $watch_on_changed ]]; then
    echo "$appname: cant combine --uncompress and --watch-on-changed"; exit 1
fi

echo $$ > $pidfile
printline "$appname: PID: $(<$pidfile), logfile: $logfile"

if [[ -z $dhcprange ]]; then

    printed=0
    while true; do

        ip=$(ip a show $iface 2>/dev/null | awk '/inet\s/ {print $2}')
        if [[ -z $ip ]]; then
            if (( $printed != 1)); then
                printline "$appname: interface $iface not available. Waiting for $iface"
            fi
            printed=1
            sleep 2
            continue
        fi

        hostmin=$(ipcalc $ip -nb | awk '/HostMin:/ {print $2}')
        hostmax=$(ipcalc $ip -nb | awk '/HostMax:/ {print $2}')

        dhcprange="$hostmin,$hostmax,24h"
        break
    done
fi

known_ifaces=$(ls -1 /sys/class/net | sed "/$iface/d" | tr -t '\n' ',')
opts+=(--interface=$iface \
       --except-interface=${known_ifaces::-1} \
       --dhcp-range=$dhcprange \
       --enable-tftp=$iface \
       --tftp-root=$tftproot \
       --log-facility=$logfile \
       --dhcp-script="${PXED_DHCP_SCRIPT:=$HERE/etc/pxed-dhcp-hook}" )

if [[ ! -z $watch ]]; then

    if [[ ! $(command -v fswatch) >/dev/null ]]; then
        echo "$appname: missing fswatch binary"; exit 1;
    fi

    fisrtsync
    watcher &
fi

printline "$appname: listening on $iface UDP ${listenaddr:="0.0.0.0"}:67:69 with TFTP root $tftproot with $dhcprange"
exec -a $appname ${HERE}/usr/sbin/dnsmasq "${opts[@]}" 2>/dev/null
